import React, { useEffect, useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Swiper from 'react-native-deck-swiper';
import { useRoute } from '@react-navigation/native';

const CompanyHomePage = () => {
    const navigation = useNavigation();
    const [jobSearchers, setJobSearchers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [userType, setUserType] = useState('');
    const [conversations, setConversations] = useState([]);
    const route = useRoute();
    const { selectedOffer } = route.params || {};
    const [matchingJobSearchers, setMatchingJobSearchers] = useState([]);
    const [disableSwipe, setDisableSwipe] = useState(false);

    useEffect(() => {
        if (selectedOffer) {
            fetchMatchingCandidates(selectedOffer);
        } else {
            fetchMatchingCandidatesForCompany();
        }
    }, [selectedOffer]);


useEffect(() => {
    console.log("üÜï Mise √† jour des candidats apr√®s swipe :", matchingJobSearchers);
}, [matchingJobSearchers]);

const fetchMatchingCandidates = async (jobOffer) => {
    if (!jobOffer || !jobOffer._id) {
        console.error("‚ùå Erreur : jobOffer ou son ID est invalide !");
        return;
    }

    try {
        const token = await AsyncStorage.getItem("userToken");
        const swiperId = await AsyncStorage.getItem("userId"); // ID de l'entreprise qui swipe
        if (!token || !swiperId) {
            console.error("‚ùå Token ou swiperId manquant !");
            return;
        }

        console.log("üì° Chargement des candidats pour :", jobOffer.title);
console.log("üîç Format des swipedIds r√©cup√©r√©s :", swipedResponse.data.map(s => ({
        swiperId: s.swiperId,
        swipedId: s.swipedId,
        jobOfferId: s.jobOfferId,
        isFromRedirection: s.isFromRedirection
    })));

        // ‚úÖ R√©cup√©rer tous les candidats correspondant √† l'offre
        const response = await axios.get(`http://localhost:8080/jobsearchers/matching?jobOfferId=${jobOffer._id}`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        let candidates = response.data;
        console.log("‚úÖ Candidats correspondants avant filtrage :", candidates.map(c => ({
            name: c.name,
            userId: c.userId?.toString(),
            id: c.id?.toString()
        })));

        // ‚úÖ R√©cup√©rer les job searchers d√©j√† swip√©s √† gauche par cette entreprise pour CETTE offre
        let swipedIdsForOffer = new Set();
        try {
            const swipedResponse = await axios.get(`http://localhost:8080/api/swiped/${swiperId}/${jobOffer._id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
    console.log("üìå Swipes r√©cup√©r√©s (JSON brut) :", swipedResponse.data);

            // üî• Filtrer SEULEMENT les swipes √† gauche qui proviennent d'une redirection
            swipedIdsForOffer = new Set(
                swipedResponse.data
                    .filter(item => item.direction === "left" && item.isFromRedirection === true)
                    .map(item => item.swipedId.toString().trim())
            );

            console.log("‚ùå Liste des candidats d√©j√† swip√©s √† gauche dans la redirection pour cette offre :", [...swipedIdsForOffer]);

        } catch (error) {
            console.error("‚ö†Ô∏è Erreur lors de la r√©cup√©ration des swipes :", error);
        }

        console.log("‚úÖ Liste compl√®te des candidats avant filtrage :", candidates.map(c => c.userId?.toString() || c.id?.toString()));
        console.log("‚ùå Liste des candidats d√©j√† swip√©s (normalis√©e) :", [...swipedIdsForOffer]);

        // ‚úÖ Filtrage des candidats d√©j√† swip√©s pour CETTE offre dans la redirection
        candidates = candidates.filter(candidate => {
            const candidateId = candidate.userId?.toString() || candidate.id?.toString();
            const isSwipedForOffer = swipedIdsForOffer.has(candidateId);

            if (isSwipedForOffer) {
                console.log(`‚ùå Exclusion de ${candidate.name} (ID: ${candidateId}) - Swip√© √† gauche dans la redirection pour cette offre`);
            } else {
                console.log(`‚úÖ Conservation de ${candidate.name} (ID: ${candidateId})`);
            }

            return !isSwipedForOffer;
        });

        console.log("‚úÖ Liste finale des candidats apr√®s filtrage :", candidates.map(c => c.userId?.toString() || c.id?.toString()));

        // ‚úÖ R√©cup√©rer les utilisateurs ayant lik√© cette offre
        let likedUsers = [];
        try {
            const likesResponse = await axios.get(`http://localhost:8080/likes?swipedId=${jobOffer._id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            likedUsers = likesResponse.data.map(like => like.swiperId.toString().trim());
            console.log("üíñ Liste des likes normalis√©e :", likedUsers);

        } catch (error) {
            console.error("‚ö†Ô∏è Erreur lors de la r√©cup√©ration des likes :", error);
        }

        // ‚úÖ Ajouter une propri√©t√© `hasLikedOffer` et corriger `matchingScore`
        candidates = candidates.map(candidate => ({
            ...candidate,
            hasLikedOffer: likedUsers.includes(candidate.userId ? candidate.userId.toString().trim() : ""),
            matchingScore: isNaN(candidate.matchingScore) || candidate.matchingScore === null
                ? 0
                : Math.round(candidate.matchingScore * 100) / 100
        }));

        // ‚úÖ Trier les candidats : Ceux qui ont lik√© d'abord, puis ceux avec le meilleur score
        candidates.sort((a, b) =>
            (b.hasLikedOffer - a.hasLikedOffer) || (b.matchingScore - a.matchingScore)
        );

        candidates.forEach(c => console.log(`‚úÖ Score final apr√®s traitement : ${c.name} - ${c.matchingScore}%`));

        console.log("üìå Liste finale des candidats apr√®s tri :", candidates);

        // ‚úÖ Mise √† jour de l'√©tat avec la nouvelle liste
        setMatchingJobSearchers([...candidates]);

    } catch (error) {
        console.error("‚ùå Erreur lors du chargement des candidats :", error);
    } finally {
        setIsLoading(false);
    }
};
const fetchMatchingCandidatesForCompany = async () => {
    try {
        const token = await AsyncStorage.getItem('userToken');
        const companyId = await AsyncStorage.getItem("userId");

        if (!token || !companyId) {
            console.error("‚ùå Token ou companyId manquant !");
            return;
        }

        console.log("üì° Chargement des candidats pour l'entreprise...");

        // ‚úÖ R√©cup√©rer la liste des candidats
        const response = await axios.get(`http://localhost:8080/jobsearchers/matching/company?companyId=${companyId}`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        let allJobSearchers = response.data;
        console.log("‚úÖ Candidats tri√©s par score :", allJobSearchers);

        // ‚úÖ R√©cup√©rer les candidats d√©j√† swip√©s de mani√®re globale (sans offre sp√©cifique)
        let swipedIds = new Set();
        try {
            const swipedResponse = await axios.get(`http://localhost:8080/api/swiped/${companyId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });

            // üî• V√©rification des swipes r√©cup√©r√©s
            console.log("üìå Swipes r√©cup√©r√©s :", swipedResponse.data);

            // ‚úÖ CORRECTION ICI : Filtrer uniquement les swipes √† gauche avec jobOfferId vide et isFromRedirection=false
            swipedIds = new Set(
                swipedResponse.data
                    .filter(item =>
                        item.direction === "left" &&                // Exclure ceux swip√©s √† gauche
                        item.isFromRedirection === false &&        // Doit venir de la page normale (pas redirection)
                        (!item.jobOfferId || item.jobOfferId.trim() === "") // Doit avoir un jobOfferId vide
                    )
                    .map(item => item.swipedId.toString().trim())
            );


            console.log("‚ùå Liste des candidats d√©j√† swip√©s selon les crit√®res :", [...swipedIds]);

        } catch (error) {
            console.error("‚ö†Ô∏è Erreur lors de la r√©cup√©ration des swipes :", error);
        }

console.log("‚úÖ Liste compl√®te des job searchers AVANT filtrage :", allJobSearchers.map(c => ({
            name: c.name,
            userId: c.userId?.toString(),
            id: c.id?.toString()
        })));

        console.log("‚ùå Liste des candidats swip√©s globalement √† gauche :", [...swipedIds]);

        // ‚úÖ Filtrer les candidats pour ne pas afficher ceux qui ont √©t√© swip√©s globalement
        allJobSearchers = allJobSearchers.filter(candidate => {
            const candidateId = candidate.userId?.toString() || candidate.id?.toString();

            if (swipedIds.has(candidateId)) {
                console.log(`‚ùå Exclusion de ${candidate.name} (ID: ${candidateId}) - Swip√© √† gauche globalement`);
                return false;
            } else {
                console.log(`‚úÖ Conservation de ${candidate.name} (ID: ${candidateId})`);
                return true;
            }
        });


console.log("‚úÖ Liste des job searchers APR√àS filtrage :", allJobSearchers.map(c => ({
            name: c.name,
            userId: c.userId?.toString(),
            id: c.id?.toString()
        })));
        console.log("‚úÖ Liste finale des candidats apr√®s filtrage :", allJobSearchers.map(c => c.userId?.toString() || c.id?.toString()));

        setJobSearchers([...allJobSearchers]);

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des job searchers:', error);
    } finally {
        setIsLoading(false);
    }
};

const fetchJobSearchers = async () => {
    try {
        const token = await AsyncStorage.getItem('userToken');
        const companyId = await AsyncStorage.getItem("userId");

        if (!token || !companyId) {
            console.error("‚ùå Token ou companyId manquant !");
            return;
        }

        console.log("üì° R√©cup√©ration des candidats non swip√©s dans l'entr√©e normale...");

        // ‚úÖ 1. R√©cup√©rer tous les job searchers disponibles
        const response = await axios.get(`http://localhost:8080/api/jobsearchers/all`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        let allJobSearchers = response.data;
        console.log("‚úÖ Liste compl√®te des job searchers :", allJobSearchers);

        // ‚úÖ 2. R√©cup√©rer les swipedCards avec les crit√®res sp√©cifi√©s
        const swipedResponse = await axios.get(`http://localhost:8080/api/swiped/${companyId}`, {
            headers: { Authorization: `Bearer ${token}` },
        });

        // ‚úÖ 3. Extraire uniquement les swipedIds qui respectent les crit√®res
        const swipedIds = new Set(
            swipedResponse.data
                .filter(item => item.offerId === "" && item.isFromRedirection === false)
                .map(item => item.swipedId)
        );

        console.log("‚ùå Liste des candidats d√©j√† swip√©s selon les crit√®res :", [...swipedIds]);

        // ‚úÖ 4. Filtrer la liste pour exclure ces candidats
        // ‚úÖ V√©rifier si l'√©l√©ment existe bien dans swipedIds avant de filtrer
        allJobSearchers = allJobSearchers.filter(jobSearcher => {
            const jobSearcherId = jobSearcher.userId?.toString() || jobSearcher.id?.toString();
            console.log(`üîç V√©rification de ${jobSearcherId}, est-il dans swipedIds ?`, swipedIds.has(jobSearcherId));
            return !swipedIds.has(jobSearcherId);
        });


        console.log("‚úÖ Liste finale apr√®s suppression des swipes :", allJobSearchers);

        // ‚úÖ 5. Mise √† jour de l'√©tat avec la liste filtr√©e
        setJobSearchers(allJobSearchers);

    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des job searchers:', error);
    } finally {
        setIsLoading(false);
    }
};

    useEffect(() => {
        const fetchUserType = async () => {
            const type = await AsyncStorage.getItem('userType');
            setUserType(type);
        };

        fetchUserType();
    }, []);
const handleSwipeRight = async (index) => {
    if (disableSwipe) return; // Bloquer les swipes si une requ√™te est en cours
    setDisableSwipe(true); // D√©sactiver temporairement le swipe

    const swipedJobSearcher = selectedOffer ? matchingJobSearchers[index] : jobSearchers[index];

    if (!swipedJobSearcher) {
        console.error("‚ùå Aucun job searcher trouv√© pour cet index.");
        setDisableSwipe(false);
        return;
    }

    const swipedId = swipedJobSearcher.userId;
    const swiperId = await AsyncStorage.getItem("userId");
    const offerId = selectedOffer ? selectedOffer._id : "";
    const isFromRedirection = false;
    const direction = "right";

    if (!swiperId || !swipedId) {
        console.error("‚ùå swiperId ou swipedId est manquant !");
        setDisableSwipe(false);
        return;
    }

    console.log("‚úÖ Enregistrement d'un swipe √† droite pour :", swipedId);

    try {
        const token = await AsyncStorage.getItem('userToken');

        // ‚úÖ V√©rifier si le swipe existe d√©j√†
        const checkSwipe = await axios.get(`http://localhost:8080/api/swiped/check`, {
            params: { swiperId, swipedId, direction, offerId, isFromRedirection },
            headers: { Authorization: `Bearer ${token}` },
        });

        if (checkSwipe.data.exists) {
            console.log("üü° Swipe d√©j√† enregistr√©, pas besoin d'ajouter.");
            setDisableSwipe(false);
            return;
        }

        // ‚úÖ Enregistrer le swipe (like)
        await axios.post(
            "http://localhost:8080/api/swiped/save",
            { swiperId, swipedId, direction, offerId, isFromRedirection },
            { headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" } }
        );

        console.log("‚úÖ Swipe enregistr√© avec succ√®s.");

        // ‚úÖ Enregistrer le like SEULEMENT apr√®s confirmation du swipe
        await axios.post(
            "http://localhost:8080/likes/like",
            { swiperId, swipedId, companyId: swiperId, offerId, isFromRedirection },
            { headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" } }
        );

        console.log("üíñ Like enregistr√© avec succ√®s.");

        // ‚úÖ Mise √† jour de la liste apr√®s suppression de la carte swip√©e
        setMatchingJobSearchers(prevState => {
            const updatedList = prevState.filter((_, i) => i !== index);
            console.log("üîÑ Mise √† jour des candidats apr√®s suppression :", updatedList);
            return updatedList;
        });

        // üî• Ajouter un d√©lai pour √©viter un bug d'affichage
        setTimeout(() => {
            setMatchingJobSearchers(prevState => prevState.filter((_, i) => i !== index));
            setDisableSwipe(false);
        }, 100); // D√©lai court pour laisser le Swiper compl√©ter son animation


    } catch (error) {
        console.error('‚ùå Erreur lors du swipe:', error);
        setDisableSwipe(false); // R√©activer le swipe en cas d'erreur
    }
};
const handleSwipeLeft = async (index) => {
    if (disableSwipe) return;
    setDisableSwipe(true);

    const swipedJobSearcher = selectedOffer ? matchingJobSearchers[index] : jobSearchers[index];

    if (!swipedJobSearcher) {
        console.error("‚ùå Aucun job searcher trouv√© pour cet index.");
        setDisableSwipe(false);
        return;
    }

    console.log("üî¥ Job Seeker ignor√©:", swipedJobSearcher);

    const swipedId = swipedJobSearcher.userId;
    const swiperId = await AsyncStorage.getItem("userId");
    const jobOfferId = "";
    const isFromRedirection = false;
    const direction = "left";

    if (!swiperId || !swipedId) {
        console.error("‚ùå swiperId ou swipedId est manquant !");
        setDisableSwipe(false);
        return;
    }

    try {
        const token = await AsyncStorage.getItem('userToken');

        // ‚úÖ V√©rifier si le swipe EXACTEMENT IDENTIQUE existe d√©j√†
        const checkSwipe = await axios.get(`http://localhost:8080/api/swiped/check`, {
            params: { swiperId, swipedId, direction, jobOfferId, isFromRedirection },
            headers: { Authorization: `Bearer ${token}` },
        });

        if (checkSwipe.data.exists) {
            console.log("üü° Swipe d√©j√† enregistr√©, pas besoin d'ajouter.");
            setDisableSwipe(false);
            return;
        }

        // ‚úÖ Enregistrer le swipe (ignore)
        await axios.post(
            "http://localhost:8080/api/swiped/save",
            { swiperId, swipedId, direction, jobOfferId, isFromRedirection },
            { headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" } }
        );

        console.log("‚úÖ Swipe √† gauche enregistr√© avec succ√®s !");

        // ‚úÖ Mise √† jour locale pour supprimer la carte
        setMatchingJobSearchers(prevState => {
            const updatedList = prevState.filter((_, i) => i !== index);
            console.log("üîÑ Mise √† jour des candidats apr√®s suppression :", updatedList);
            return updatedList;
        });

        setTimeout(() => {
            setMatchingJobSearchers(prevState => prevState.filter((_, i) => i !== index));
            setDisableSwipe(false);
        }, 100); // D√©lai court pour laisser le Swiper compl√©ter son animation


    } catch (error) {
        console.error('‚ùå Erreur lors du swipe gauche:', error);
        setDisableSwipe(false);
    }
};

    return (
        <View style={styles.container}>
                    <View style={styles.topButtons}>
                        <Button title="Profile" onPress={() => navigation.navigate('ProfilePage')} />
                        <Button title="Main Menu" onPress={() => navigation.navigate('CompanyHome')} />
                        <Button title={`Chat ${conversations.length > 0 ? `(${conversations.length})` : ''}`} onPress={() => navigation.navigate('ChatPage')} />
                        <Button title="My Offers" onPress={() => navigation.navigate('MyOffersPage')} />
                        {userType === 'COMPANY' && <Button title="Liked Candidates" onPress={() => navigation.navigate('LikedPage')} />}
                    </View>

                    {selectedOffer && selectedOffer.title && (
                        <Text style={styles.offerTitle}>üîç Candidats pour : {selectedOffer.title}</Text>
                    )}

                    <View style={styles.swiperContainer}>
                        {isLoading ? (
                            <Text>Loading...</Text>
                        ) : (
                            <Swiper
                                key={matchingJobSearchers.map(c => c.userId).join(",")}
                                cards={selectedOffer ? matchingJobSearchers : jobSearchers}
                                renderCard={(jobSearcher) => (
                                    jobSearcher ? (
                                        <View style={styles.card}>
                                            {jobSearcher.hasLikedOffer && (
                                                <Text style={styles.likedText}>üíñ Cet utilisateur a lik√© une offre de l'entreprise !</Text>
                                            )}

                                            <Text style={styles.cardTitle}>{jobSearcher.name || 'No name provided'}</Text>
                                            <Text>üìç Localisation : {jobSearcher.locations?.join(", ") || "Unknown"}</Text>
                                            <Text>üíª Comp√©tences :
                                                {jobSearcher.skills?.map(skill => `${skill.name} (${skill.experience} ans)`).join(", ") || "Unknown"}
                                            </Text>

                                            {/* ‚úÖ Affichage conditionnel du score avec arrondi √† 2 chiffres */}
                                            {selectedOffer ? (
                                                <Text>üéØ Score de matching (offre s√©lectionn√©e) :
                                                    {jobSearcher.matchingScore !== undefined ? jobSearcher.matchingScore.toFixed(2) + "%" : "N/A"}
                                                </Text>
                                            ) : (
                                                <Text>üéØ Score de matching (toutes offres) :
                                                    {jobSearcher.matchingScore !== undefined ? jobSearcher.matchingScore.toFixed(2) + "%" : "N/A"}
                                                </Text>
                                            )}
                                        </View>
                                    ) : (
                                        <View style={styles.card}>
                                            <Text style={styles.cardTitle}>No candidates available</Text>
                                        </View>
                                    )
                                )}

                                onSwipedRight={(cardIndex) => !disableSwipe && handleSwipeRight(cardIndex)}
                                onSwipedLeft={(cardIndex) => !disableSwipe && handleSwipeLeft(cardIndex)}

                                cardIndex={0}
                                stackSize={3}
                            />


                        )}
                    </View>
                </View>
    );
};
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        padding: 10,
    },
    topButtons: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingHorizontal: 10,
        marginTop: 20,
    },
    swiperContainer: {
        flex: 1,
        marginTop: 20,
    },
    card: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f9f9f9',
        borderRadius: 10,
        borderWidth: 1,
        borderColor: '#ddd',
        padding: 20,
        marginHorizontal: 10,
    },
    cardTitle: {
        fontWeight: 'bold',
        fontSize: 18,
        marginBottom: 10,
    },
    cardDescription: {
        fontSize: 14,
        color: '#555',
        textAlign: 'center',
    },
    likedText: {
        color: "green",
        fontWeight: "bold",
        fontSize: 16,
        marginBottom: 5,
    },notLikedText: {
          color: "gray",
          fontWeight: "bold",
          fontSize: 14,
          marginBottom: 5,
      },


});
export default CompanyHomePage;