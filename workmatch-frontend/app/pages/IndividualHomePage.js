import React, { useEffect, useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import Swiper from 'react-native-deck-swiper';

const IndividualHomePage = () => {
    const navigation = useNavigation();
    const [jobOffers, setJobOffers] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [userId, setUserId] = useState(null);
    const [conversations, setConversations] = useState([]);

    useEffect(() => {
        const fetchUserData = async () => {
            const storedUserId = await AsyncStorage.getItem('userId');
            setUserId(storedUserId);
            console.log("üë§ ID utilisateur r√©cup√©r√© :", storedUserId);
        };

        const fetchJobOffers = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                const swiperId = await AsyncStorage.getItem("userId"); // L'ID de l'utilisateur Individual

                if (!token || !swiperId) {
                    console.error("‚ùå Token ou swiperId manquant !");
                    return;
                }

                console.log("üîë JWT Token r√©cup√©r√© :", token);

                // üìå R√©cup√©ration de toutes les offres d'emploi
                const response = await axios.get('http://localhost:8080/joboffers', {
                    headers: { Authorization: `Bearer ${token}` },
                });
                const allJobOffers = response.data;

                // üìå R√©cup√©ration des swipes d√©j√† effectu√©s par cet utilisateur
                const swipedResponse = await axios.get(`http://localhost:8080/api/swiped/${swiperId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                });

                const swipedData = swipedResponse.data; // Liste des swipes (right & left)
                const swipedIds = new Set(swipedData.map(item => item.swipedId)); // Stocker les IDs swip√©s

                // üî• Filtrer les offres en excluant celles d√©j√† swip√©es
                const filteredJobOffers = allJobOffers.filter(offer => !swipedIds.has(offer._id));

                setJobOffers(filteredJobOffers); // Met √† jour l'√©tat avec la liste filtr√©e

                // üñ•Ô∏è Console.log : Affiche la liste apr√®s filtrage
                console.log("‚úÖ Liste des offres affich√©es apr√®s filtrage :", filteredJobOffers);

            } catch (error) {
                console.error('‚ùå Error fetching job offers:', error);
            } finally {
                setIsLoading(false);
            }
        };

        const fetchConversations = async () => {
            try {
                const token = await AsyncStorage.getItem('userToken');
                const storedUserId = await AsyncStorage.getItem('userId');

                if (!token || !storedUserId) {
                    console.error("‚ùå Token ou UserId manquant !");
                    return;
                }

                setUserId(storedUserId);

                const response = await axios.get(`http://localhost:8080/api/conversations/${storedUserId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                });

                setConversations(response.data);
                console.log("‚úÖ Conversations charg√©es :", response.data);
            } catch (error) {
                console.error("‚ùå Erreur lors du chargement des conversations :", error);
            }
        };

        fetchUserData();
        fetchJobOffers();
        fetchConversations(); // ‚úÖ Ajoute cet appel pour √©viter l'erreur

    }, []);


    const handleSwipeRight = async (index) => {
        const swipedJobOffer = jobOffers[index];

        if (!swipedJobOffer) {
            console.error("‚ùå Aucun job offer trouv√© pour cet index.");
            return;
        }

        console.log("üü¢ Job Offer s√©lectionn√©e:", swipedJobOffer);

        const swipedId = swipedJobOffer._id;  // ‚úÖ V√©rifie bien que "_id" est utilis√©
        const companyId = swipedJobOffer.companyId || swipedJobOffer.company?.id;  // ‚úÖ R√©cup√®re bien le companyId
        const swiperId = await AsyncStorage.getItem("userId");

        if (!swiperId || !swipedId || !companyId) {
            console.error("‚ùå swiperId, swipedId ou companyId est manquant !");
            console.log("üìå swiperId:", swiperId);
            console.log("üìå swipedId:", swipedId);
            console.log("üìå companyId:", companyId);
            return;
        }

        console.log("‚úÖ swiperId envoy√© :", swiperId);
        console.log("‚úÖ swipedId envoy√© :", swipedId);
        console.log("‚úÖ companyId envoy√© :", companyId);

        const direction = "right"; // ‚úÖ Ajout de la direction

        try {
            const token = await AsyncStorage.getItem('userToken');

            console.log("üîë Token utilis√© pour la requ√™te :", token);

            const response = await axios.post(
                "http://localhost:8080/api/matches/swipe/individual",
                { swiperId, swipedId, companyId },
                {
                    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
                }
            );

            await axios.post(
                "http://localhost:8080/api/swiped/save",
                { swiperId, swipedId, direction }, // ‚úÖ Envoie les IDs + la direction (right/left)
                {
                    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
                }
            );
            const matchResponse = await axios.post(
                "http://localhost:8080/api/matches/match",
                { swiperId, swipedId },
                { headers: { Authorization: `Bearer ${token}` } }
            );

            console.log("üü¢ R√©ponse match :", matchResponse.data);

            console.log("‚úÖ R√©ponse serveur :", response.data);
            fetchConversations();
        } catch (error) {
            console.error('‚ùå Erreur lors du swipe:', error);
        }
    };


    const handleSwipeLeft = async (index) => {
        const swipedJobOffer = jobOffers[index];

        if (!swipedJobOffer) {
            console.error("‚ùå Aucun job offer trouv√© pour cet index.");
            return;
        }

        console.log("üî¥ Job Offer ignor√©e:", swipedJobOffer);

        const swipedId = swipedJobOffer._id;  // ‚úÖ V√©rifie bien que "_id" est utilis√©
        const companyId = swipedJobOffer.companyId || swipedJobOffer.company?.id;  // ‚úÖ R√©cup√®re bien le companyId
        const swiperId = await AsyncStorage.getItem("userId");

        if (!swiperId || !swipedId || !companyId) {
            console.error("‚ùå swiperId, swipedId ou companyId est manquant !");
            console.log("üìå swiperId:", swiperId);
            console.log("üìå swipedId:", swipedId);
            console.log("üìå companyId:", companyId);
            return;
        }

        console.log("‚úÖ swiperId envoy√© :", swiperId);
        console.log("‚úÖ swipedId envoy√© :", swipedId);
        console.log("‚úÖ companyId envoy√© :", companyId);

        const direction = "left"; // ‚úÖ Indique que c'est un swipe √† gauche

        try {
            const token = await AsyncStorage.getItem('userToken');

            console.log("üîë Token utilis√© pour la requ√™te :", token);

            // Enregistrer tous les swipes (droite et gauche) dans `swipedCard`
            await axios.post(
                "http://localhost:8080/api/swiped/save",
                { swiperId, swipedId, direction }, // ‚úÖ Envoie les IDs + la direction "left"
                {
                    headers: { Authorization: `Bearer ${token}`, "Content-Type": "application/json" },
                }
            );

            // ‚úÖ V√©rifier si un match est confirm√©
            const matchResponse = await axios.post(
                "http://localhost:8080/api/matches/match",
                { swiperId, swipedId },
                { headers: { Authorization: `Bearer ${token}` } }
            );

            console.log("‚úÖ Swipe √† gauche enregistr√© avec succ√®s !");
        } catch (error) {
            console.error('‚ùå Erreur lors du swipe gauche:', error);
        }
    };


    return (
        <View style={styles.container}>
            <View style={styles.topButtons}>
                <Button title="Profile" onPress={() => navigation.navigate('ProfilePage')} />
                <Button title="Main Menu" onPress={() => navigation.navigate('IndividualHome')} />
                <Button
                    title={`Chat ${conversations.length > 0 ? `(${conversations.length})` : ''}`}
                    onPress={() => navigation.navigate('ChatPage')}
                />
                <Button title="My Offers" onPress={() => navigation.navigate('MyOffersPage')} />
            </View>

            <View style={styles.swiperContainer}>
                {isLoading ? (
                    <Text>Loading...</Text>
                ) : (
                    <Swiper
                        cards={jobOffers}
                        renderCard={(offer) => (
                            <View style={styles.card}>
                                <Text style={styles.cardTitle}>{offer.title}</Text>
                                <Text style={styles.cardDescription}>
                                    {offer.description.length > 150 ? `${offer.description.slice(0, 150)}...` : offer.description}
                                </Text>
                            </View>
                        )}
                        onSwipedRight={(cardIndex) => handleSwipeRight(cardIndex)}
                        onSwipedLeft={(cardIndex) => handleSwipeLeft(cardIndex)}
                        cardIndex={0}
                        backgroundColor={'#f3f3f3'}
                        stackSize={3}
                        infinite
                    />
                )}
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    topButtons: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingHorizontal: 10,
        marginTop: 20,
        marginBottom: 10,
        zIndex: 1,
    },
    swiperContainer: {
        flex: 1,
        marginTop: 10,
    },
    card: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f9f9f9',
        borderRadius: 10,
        borderWidth: 1,
        borderColor: '#ddd',
        padding: 20,
        marginHorizontal: 10,
    },
    cardTitle: {
        fontWeight: 'bold',
        fontSize: 18,
        marginBottom: 10,
    },
    cardDescription: {
        fontSize: 14,
        color: '#555',
        textAlign: 'center',
    },
});

export default IndividualHomePage;
